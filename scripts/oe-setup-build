#!/usr/bin/env python3
#
# Copyright OpenEmbedded Contributors
#
# SPDX-License-Identifier: MIT
#

import argparse
import json
import os
import subprocess

def defaulttop():
    return os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))

def makebuildpath(topdir, templatelocation, template):
    return os.path.join(topdir, "build-{}-{}".format(os.path.basename(os.path.abspath(os.path.join(templatelocation,'..','..'))), template))

def print_templates(args):
    topdir = args.topdir
    verbose = args.v
    print("Available build configuration templates (re-run with -v to see their descriptions):\n")
    for (dir, dirs, files) in os.walk(topdir):
        if dir.endswith('conf/templates'):
            for d in dirs:
                print("{} setup-build-env -c {}\nwill create a build configuration in {}\n".format(__file__, os.path.join(dir, d), makebuildpath(args.topdir, dir, d)))
                if verbose:
                    if os.path.join(dir, d).endswith('meta-poky/conf/templates/default'):
                        print("Description: this is the reference configuration of the poky reference distribution (choose this if you are uncertain).")
                    elif os.path.join(dir, d).endswith('meta/conf/templates/default'):
                        print("Description: this is the reference configuration of the openembedded-core layer (choose this if you are uncertain).")
                    else:
                        print("Description:", open(os.path.join(dir, d, 'conf-notes.txt')).read())
                    print("---")

        # Do not recurse into build directories; they can be enormous
        if 'conf' in dirs and 'bblayers.conf' in os.listdir(os.path.join(dir, 'conf')):
            dirs.clear()
        # Do not recurse into sstate-cache or downloads similarly
        if 'universal' in dirs and '00' in dirs:
            dirs.clear()
        if 'uninative' in dirs and 'git2' in dirs:
            dirs.clear()

def setup_build_env(args):
    template = args.c
    builddir = args.b
    no_shell = args.no_shell
    if not builddir:
        builddir = makebuildpath(defaulttop(), os.path.dirname(template), os.path.basename(template))
    coredir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    cmd = "TEMPLATECONF={} . {} {}".format(template, os.path.join(coredir, 'oe-init-build-env'), builddir)
    if not no_shell:
        cmd = cmd + " && {}".format(os.environ['SHELL'])
    print("Running:", cmd)
    subprocess.run(cmd, shell=True, executable=os.environ['SHELL'])

parser = argparse.ArgumentParser(description="A script that discovers available build configuration templates and sets up a build environment based on one of them")
subparsers = parser.add_subparsers()
parser_list_templates = subparsers.add_parser('list-config-templates', help='List available configuration templates')

parser_list_templates.add_argument("--topdir", default=defaulttop(), help='Where to look for available build configuration templates (default is {}).'.format(defaulttop()))
parser_list_templates.add_argument('-v', action='store_true',
        help='Print a description for each available build configuration template.')
parser_list_templates.set_defaults(func=print_templates)

parser_setup_env = subparsers.add_parser('setup-build-env', help='Set up a build environment and open a shell session with it, ready to run builds.')
parser_setup_env.add_argument('-c', metavar='template_path', required=True, help="Use a build configuration template in template_path to set up a build environment (run this script with 'list-config-templates' to see what is available)")
parser_setup_env.add_argument('-b', metavar='build_path', help="Set up a build directory in build_path (run this script with 'list-config-templates' to see where it would be by default)")
parser_setup_env.add_argument('--no-shell', action='store_true',
        help='Create a build directory but do not start a shell session with the build environment from it.')
parser_setup_env.set_defaults(func=setup_build_env)

args = parser.parse_args()
if 'func' in args:
    args.func(args)
else:
    from argparse import Namespace
    print_templates(Namespace(topdir=defaulttop(), v=False))
